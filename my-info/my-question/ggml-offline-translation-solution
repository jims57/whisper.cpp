I'll outline several possible solutions for offline text-to-text translation on mobile devices, considering your requirements of multi-language support, small model size, speed, and accuracy.
Solution Comparison Matrix
CTranslate2 + MarianMT
Model Size: ✅ Small (65-125MB per language pair)
Speed: ✅ Very Fast
Accuracy: ✅ Good
Language Support: ⚠️ Good (100+ language pairs)
Mobile Integration: ✅ Excellent
GGML + M2M-100
Model Size: ⚠️ Medium (418MB for all languages)
Speed: ✅ Fast
Accuracy: ✅ Very Good
Language Support: ✅ Excellent (100 languages)
Mobile Integration: ✅ Good
TensorFlow Lite + Small Transformer
Model Size: ✅ Small (20-50MB per language pair)
Speed: ✅ Fast
Accuracy: ⚠️ Moderate
Language Support: ⚠️ Limited
Mobile Integration: ✅ Excellent
Recommended Solution: CTranslate2 + MarianMT
This would be my top recommendation based on your requirements. Here's how to implement it:
1. Basic Architecture
class TranslationService {
public:
    // Initialize with specific language pairs
    bool initialize(const std::vector<std::string>& language_pairs);
    
    // Main translation function
    std::string translate(
        const std::string& text,
        const std::string& source_lang,
        const std::string& target_lang
    );

private:
    // Model management
    struct ModelInfo {
        std::unique_ptr<ctranslate2::Translator> translator;
        std::unique_ptr<SentencePieceProcessor> tokenizer_source;
        std::unique_ptr<SentencePieceProcessor> tokenizer_target;
    };
    
    std::unordered_map<std::string, ModelInfo> models_;
};

;
Model Loading
bool TranslationService::initialize(const std::vector<std::string>& language_pairs) {
    for (const auto& pair : language_pairs) {
        ModelInfo model_info;
        
        // Load quantized model
        ctranslate2::models::ModelConfig config;
        config.compute_type = ctranslate2::ComputeType::INT8;
        config.device = ctranslate2::Device::CPU;
        
        model_info.translator = std::make_unique<ctranslate2::Translator>(
            "models/" + pair,
            config
        );
        
        // Load tokenizers
        model_info.tokenizer_source->Load("models/" + pair + "/source.spm");
        model_info.tokenizer_target->Load("models/" + pair + "/target.spm");
        
        models_[pair] = std::move(model_info);
    }
    return true;
}


Translation Implementation
std::string TranslationService::translate(
    const std::string& text,
    const std::string& source_lang,
    const std::string& target_lang) {
    
    std::string pair_key = source_lang + "-" + target_lang;
    auto& model = models_[pair_key];
    
    // Tokenize input
    std::vector<std::string> tokens;
    model.tokenizer_source->Encode(text, &tokens);
    
    // Translate
    ctranslate2::TranslationOptions options;
    options.beam_size = 4;
    options.max_batch_size = 1;
    options.max_length = 200;
    
    auto results = model.translator->translate_batch(
        {tokens},
        options
    );
    
    // Detokenize output
    std::string output;
    model.tokenizer_target->Decode(results[0].hypotheses[0], &output);
    
    return output;
}

translate_batch
Mobile Integration
For iOS (Objective-C++):
@interface TranslationManager : NSObject
@property (nonatomic) std::unique_ptr<TranslationService> service;

- (NSString*)translateText:(NSString*)text 
                    from:(NSString*)sourceLang 
                      to:(NSString*)targetLang;
@end

translateText


For Android (JNI):
@interface TranslationManager : NSObject
@property (nonatomic) std::unique_ptr<TranslationService> service;

- (NSString*)translateText:(NSString*)text 
                    from:(NSString*)sourceLang 
                      to:(NSString*)targetLang;
@end


Memory Management
class ModelManager {
public:
    // Load models on demand
    void loadModelIfNeeded(const std::string& language_pair) {
        std::lock_guard<std::mutex> lock(mutex_);
        if (!models_.contains(language_pair)) {
            loadModel(language_pair);
        }
        last_used_[language_pair] = std::chrono::steady_clock::now();
    }
    
    // Cleanup unused models
    void cleanupUnusedModels() {
        const auto threshold = std::chrono::minutes(30);
        auto now = std::chrono::steady_clock::now();
        
        for (auto it = last_used_.begin(); it != last_used_.end();) {
            if (now - it->second > threshold) {
                models_.erase(it->first);
                it = last_used_.erase(it);
            } else {
                ++it;
            }
        }
    }

private:
    std::unordered_map<std::string, ModelInfo> models_;
    std::unordered_map<std::string, std::chrono::steady_clock::time_point> last_used_;
    std::mutex mutex_;
};

Implementation Steps:
Setup
Download and quantize MarianMT models for required language pairs
Set up CTranslate2 build for iOS/Android
Implement model management system
Optimization
Use INT8 quantization for models
Implement model caching
Use thread pooling for batch translations
Implement memory management
Quality Assurance
Implement fallback mechanisms
Add error handling
Add logging and monitoring
Distribution
Package models efficiently
Implement OTA model updates
Add version control for models
Would you like me to elaborate on any specific aspect of this solution?




==== Solution 2 ====

I'll show you how to implement offline translation using CTranslate2 + MarianMT on both iOS and Android.
1. Common C++ Core Implementation
First, let's create a shared C++ translation service:
;
}
2. iOS Implementation
translateText
end
Usage in Swift:
translateText
3. Android Implementation

#include "translation_jni.h"
#include "translation_service.h"
#include <string>

JNIEXPORT jlong JNICALL
Java_com_example_translation_TranslationService_nativeInit(
    JNIEnv* env,
    jobject thiz,
    jstring model_path,
    jstring source_spm_path,
    jstring target_spm_path) {
    
    const char* model_path_str = env->GetStringUTFChars(model_path, nullptr);
    const char* source_spm_str = env->GetStringUTFChars(source_spm_path, nullptr);
    const char* target_spm_str = env->GetStringUTFChars(target_spm_path, nullptr);
    
    auto service = new TranslationService();
    service->initialize(model_path_str, source_spm_str, target_spm_str);
    
    env->ReleaseStringUTFChars(model_path, model_path_str);
    env->ReleaseStringUTFChars(source_spm_path, source_spm_str);
    env->ReleaseStringUTFChars(target_spm_path, target_spm_str);
    
    return reinterpret_cast<jlong>(service);
}

JNIEXPORT jstring JNICALL
Java_com_example_translation_TranslationService_nativeTranslate(
    JNIEnv* env,
    jobject thiz,
    jlong handle,
    jstring text) {
    
    auto service = reinterpret_cast<TranslationService*>(handle);
    const char* text_str = env->GetStringUTFChars(text, nullptr);
    
    std::string result = service->translate(text_str);
    
    env->ReleaseStringUTFChars(text, text_str);
    return env->NewStringUTF(result.c_str());
}

package com.example.translation;

public class TranslationService {
    static {
        System.loadLibrary("translation-lib");
    }

    private long nativeHandle;

    public TranslationService(String modelPath, String sourceSpmPath, String targetSpmPath) {
        nativeHandle = nativeInit(modelPath, sourceSpmPath, targetSpmPath);
    }

    public String translate(String text) {
        return nativeTranslate(nativeHandle, text);
    }

    @Override
    protected void finalize() throws Throwable {
        nativeDestroy(nativeHandle);
        super.finalize();
    }

    private native long nativeInit(String modelPath, String sourceSpmPath, String targetSpmPath);
    private native String nativeTranslate(long handle, String text);
    private native void nativeDestroy(long handle);
}

Usage in Android:
class MainActivity : AppCompatActivity() {
    private lateinit var translationService: TranslationService

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // Initialize translation service
        val modelPath = "${applicationContext.filesDir}/models/ende.ctranslate2"
        val sourceSpmPath = "${applicationContext.filesDir}/models/source.spm"
        val targetSpmPath = "${applicationContext.filesDir}/models/target.spm"

        translationService = TranslationService(modelPath, sourceSpmPath, targetSpmPath)

        // Translate text
        val result = translationService.translate("Hello world")
        println("Translation: $result")
    }
}

4. Model Preparation
Download MarianMT model and convert to CTranslate2 format:
ct2-transformers-converter --model Helsinki-NLP/opus-mt-en-de \
    --output_dir ende.ctranslate2 \
    --quantization int8


Copy models to your app:
iOS: Add to Bundle Resources
Android: Copy to app's files directory on first launch
Would you like me to explain any specific part in more detail?